{"paragraphs":[{"text":"%md\n\n# TASK 1: PERSONA CREATION\n\n## Introduction\n\nThe marketing department of PyBank is designing a new marketing campaign for a new deposit. In order to improve the response rate of their last campaign, they have reached out to the bank’s customer analytics department looking for help.\n\nOn the their last marketing campaign, they observed that their conversion rate (the percentage of people that bought their product by the total number of people that was reached during the campaign) varied across different segments of their customer base. There are different reasons why this might happen:\n\n1. The marketing campaign was designed for a specific type of customer (persona) and it was not appealing to others.\n2. The new product that was trying to be pushed into the segment was not relevant (for example, a new deposit for lump sums of more than 5,000 euro might be relevant for people in their 30s but not for students or families).\n3. The value proposition of the product was not good enough for specific segments (e.g. the interest rate for small deposits that students can afford is under the market rate).\n4. The market campaign was not using the right channel or message.\n5. The customer data is obsolete, imcomplete or erroneous.\n\nThere are some ways data science can help marketing in this situations:\n\n1. **Customer base segmentation:** we can create clusters of customers with homogenous behaviour / demographics depending on the needs of the marketing department. Since clustering is usually an unsupervised technique, it is really important to work together with the marketing deparment in this case to agree on an evaluation of the results of a clustering algorithm (for example, how to measure the compacticity of the clusters or which type of common behaviour they expect to observe on the customer of the same cluster).\n2. **Persona creation:** this is link with the previous task. A persona is basically a representation of an *average* customer in a customer segment. In some cases personas are given real names, pictures or details to help everyone understand why type of customers we have in a segment. An example of a persona would be: John, mid 30s, married, no kids, high income & higher diploma education. In order to create good personas, it is *really* important that the segments or clusters we have just created on the previous step are compact. This is because we are using just a single persona to describe the whole segment and if the customers within it are very different we won't be able to describe them accurately. We will do steps 1 and 2 in this Task.\n3. **Propensity modelling:** we can create machine learning models to identify who is more likely to convert. We will do this in Task 2. The beneficts of Propensity Modelling are:\n    - **Cost optimisation:** sometimes running marketing campaigns is not cheap (specially if you must have someone on the other side of the line calling customers). We can reduce the cost of running our marketing campaign by targeting specifically the customers that are likely to convert. We can identify them using a machine learning model. The customers are ranked from the most likely to convert to the less likely and then we can use lift charts to decide what the optimal number of customer we must target.\n    - **Customer satisfaction:** one of the most important metrics for any customer-facing company is customer satisfaction. Just take a look to Amazon's motto: \"The most customer-centric company in the world!\". nobody likes to receive ads about products that are not relevant for them so we can increase our company's NPS by excluding these customers from our marketing campaigns.\n4. **Data quality:** we can help marketing by analysing our customers data and removing outliers / erroneous records from our databases.\n\nIn this notebook, we are going to focus on 1 and 2. This is what we are going to do:\n\n1. **Data ingestion:** the first step is to read the data files we are going to use in this workshop from our server. We've done everything for you, you just have to make sure you have an available internet connection and you run the cell. The files will be save in your machine `/tmp` folder. Feel free to drop them once we've finished the workshop. Then, we will read the files (`.csv`) into PySpark data frames.\n2. **Basic statistics:** we will show you how to get statistics of a data frame using Spark and how to visualise the results. Then, you'll have to do it on your own for one of the columns in our data.\n3. **Clustering:** we have created a clustering pipeline for you that will create different segments on the data. You are encourage to try different algorithms / parameters and see how it affects the results of the last step.\n4. **Persona creation:** we will write some code to automatically create personas from the results of our clustering pipeline. You'll have to decide which features you use in other to describe your segments and which ones are not good enough.\n\nLet's get our hand in the data! Happy hacking!","user":"anonymous","dateUpdated":"2018-03-12T19:43:25+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h1>TASK 1: PERSONA CREATION</h1>\n<h2>Introduction</h2>\n<p>The marketing department of PyBank is designing a new marketing campaign for a new deposit. In order to improve the response rate of their last campaign, they have reached out to the bank’s customer analytics department looking for help.</p>\n<p>On the their last marketing campaign, they observed that their conversion rate (the percentage of people that bought their product by the total number of people that was reached during the campaign) varied across different segments of their customer base. There are different reasons why this might happen:</p>\n<ol>\n  <li>The marketing campaign was designed for a specific type of customer (persona) and it was not appealing to others.</li>\n  <li>The new product that was trying to be pushed into the segment was not relevant (for example, a new deposit for lump sums of more than 5,000 euro might be relevant for people in their 30s but not for students or families).</li>\n  <li>The value proposition of the product was not good enough for specific segments (e.g. the interest rate for small deposits that students can afford is under the market rate).</li>\n  <li>The market campaign was not using the right channel or message.</li>\n  <li>The customer data is obsolete, imcomplete or erroneous.</li>\n</ol>\n<p>There are some ways data science can help marketing in this situations:</p>\n<ol>\n  <li><strong>Customer base segmentation:</strong> we can create clusters of customers with homogenous behaviour / demographics depending on the needs of the marketing department. Since clustering is usually an unsupervised technique, it is really important to work together with the marketing deparment in this case to agree on an evaluation of the results of a clustering algorithm (for example, how to measure the compacticity of the clusters or which type of common behaviour they expect to observe on the customer of the same cluster).</li>\n  <li><strong>Persona creation:</strong> this is link with the previous task. A persona is basically a representation of an <em>average</em> customer in a customer segment. In some cases personas are given real names, pictures or details to help everyone understand why type of customers we have in a segment. An example of a persona would be: John, mid 30s, married, no kids, high income &amp; higher diploma education. In order to create good personas, it is <em>really</em> important that the segments or clusters we have just created on the previous step are compact. This is because we are using just a single persona to describe the whole segment and if the customers within it are very different we won&rsquo;t be able to describe them accurately. We will do steps 1 and 2 in this Task.</li>\n  <li><strong>Propensity modelling:</strong> we can create machine learning models to identify who is more likely to convert. We will do this in Task 2. The beneficts of Propensity Modelling are:\n    <ul>\n      <li><strong>Cost optimisation:</strong> sometimes running marketing campaigns is not cheap (specially if you must have someone on the other side of the line calling customers). We can reduce the cost of running our marketing campaign by targeting specifically the customers that are likely to convert. We can identify them using a machine learning model. The customers are ranked from the most likely to convert to the less likely and then we can use lift charts to decide what the optimal number of customer we must target.</li>\n      <li><strong>Customer satisfaction:</strong> one of the most important metrics for any customer-facing company is customer satisfaction. Just take a look to Amazon&rsquo;s motto: &ldquo;The most customer-centric company in the world!&rdquo;. nobody likes to receive ads about products that are not relevant for them so we can increase our company&rsquo;s NPS by excluding these customers from our marketing campaigns.</li>\n    </ul>\n  </li>\n  <li><strong>Data quality:</strong> we can help marketing by analysing our customers data and removing outliers / erroneous records from our databases.</li>\n</ol>\n<p>In this notebook, we are going to focus on 1 and 2. This is what we are going to do:</p>\n<ol>\n  <li><strong>Data ingestion:</strong> the first step is to read the data files we are going to use in this workshop from our server. We&rsquo;ve done everything for you, you just have to make sure you have an available internet connection and you run the cell. The files will be save in your machine <code>/tmp</code> folder. Feel free to drop them once we&rsquo;ve finished the workshop. Then, we will read the files (<code>.csv</code>) into PySpark data frames.</li>\n  <li><strong>Basic statistics:</strong> we will show you how to get statistics of a data frame using Spark and how to visualise the results. Then, you&rsquo;ll have to do it on your own for one of the columns in our data.</li>\n  <li><strong>Clustering:</strong> we have created a clustering pipeline for you that will create different segments on the data. You are encourage to try different algorithms / parameters and see how it affects the results of the last step.</li>\n  <li><strong>Persona creation:</strong> we will write some code to automatically create personas from the results of our clustering pipeline. You&rsquo;ll have to decide which features you use in other to describe your segments and which ones are not good enough.</li>\n</ol>\n<p>Let&rsquo;s get our hand in the data! Happy hacking!</p>\n</div>"}]},"apps":[],"jobName":"paragraph_1519469667705_-2139381574","id":"20180224-105427_1666154236","dateCreated":"2018-02-24T10:54:27+0000","dateStarted":"2018-03-12T19:43:25+0000","dateFinished":"2018-03-12T19:43:29+0000","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:8814"},{"title":"1.1. Data download","text":"%pyspark\n\nimport urllib.request\n\nurllib.request.urlretrieve(\"https://wsleaderboard.herokuapp.com/data/test.snappy.parquet\", \"/tmp/test.snappy.parquet\")\nurllib.request.urlretrieve(\"https://wsleaderboard.herokuapp.com/data/training.snappy.parquet\", \"/tmp/training.snappy.parquet\")","user":"anonymous","dateUpdated":"2018-03-23T07:52:05+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false},"editorMode":"ace/mode/python","title":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"('/tmp/training.snappy.parquet', <http.client.HTTPMessage object at 0x1067554a8>)\n"}]},"apps":[],"jobName":"paragraph_1520108544734_1641141097","id":"20180303-202224_1472950704","dateCreated":"2018-03-03T20:22:24+0000","dateStarted":"2018-03-23T07:52:00+0000","dateFinished":"2018-03-23T07:52:00+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:8815"},{"text":"%pyspark\ntest.count()","user":"anonymous","dateUpdated":"2018-03-23T09:23:00+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"python"},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1521796973815_760936617","id":"20180323-092253_111227458","dateCreated":"2018-03-23T09:22:53+0000","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:10080","dateFinished":"2018-03-23T09:23:01+0000","dateStarted":"2018-03-23T09:23:00+0000","results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"10227\n"}]}},{"title":"1.2. Read the csv as a PySpark data frame","text":"%pyspark\n\ndata = sqlContext.read.parquet(\"/tmp/training.snappy.parquet\")\ntest = sqlContext.read.parquet(\"/tmp/test.snappy.parquet\")\ndata.show(10)\n","user":"anonymous","dateUpdated":"2018-03-23T08:51:07+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false},"editorMode":"ace/mode/python","editorHide":false,"title":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+---+-------+-------+-----------+-------+-------+----+---------+-----+-----------+--------+--------+-----+--------+-----------+------------+--------------+-------------+---------+-----------+---+\n|age|    job|marital|  education|default|housing|loan|  contact|month|day_of_week|duration|campaign|pdays|previous|   poutcome|emp.var.rate|cons.price.idx|cons.conf.idx|euribor3m|nr.employed|  y|\n+---+-------+-------+-----------+-------+-------+----+---------+-----+-----------+--------+--------+-----+--------+-----------+------------+--------------+-------------+---------+-----------+---+\n| 18|student| single|high.school|     no|    yes| yes| cellular|  mar|        tue|     103|       1|  999|       0|nonexistent|        -1.8|        92.843|        -50.0|    1.687|     5099.1| no|\n| 19|student| single|   basic.6y|     no|     no|  no| cellular|  mar|        tue|     136|       1|  999|       0|nonexistent|        -1.8|        92.843|        -50.0|    1.556|     5099.1|yes|\n| 19|student| single|   basic.9y|     no|     no|  no| cellular|  apr|        thu|     165|       3|  999|       0|nonexistent|        -1.8|        93.075|        -47.1|     1.41|     5099.1| no|\n| 19|student| single|   basic.9y|     no|     no|  no| cellular|  apr|        tue|      43|       3|  999|       0|nonexistent|        -1.8|        93.075|        -47.1|    1.453|     5099.1| no|\n| 19|student| single|   basic.9y|     no|    yes|  no| cellular|  mar|        fri|     126|       4|  999|       0|nonexistent|        -1.8|        92.843|        -50.0|     1.64|     5099.1|yes|\n| 19|student| single|   basic.9y|unknown|    yes|  no| cellular|  jul|        mon|      87|       4|  999|       0|nonexistent|         1.4|        93.918|        -42.7|     4.96|     5228.1| no|\n| 19|student| single|    unknown|     no|     no|  no| cellular|  apr|        fri|     108|       5|  999|       0|nonexistent|        -1.8|        93.075|        -47.1|    1.405|     5099.1| no|\n| 19|student| single|    unknown|     no|    yes|  no| cellular|  apr|        fri|     156|       1|  999|       0|nonexistent|        -1.8|        93.075|        -47.1|    1.405|     5099.1|yes|\n| 19|student| single|    unknown|     no|    yes|  no|telephone|  apr|        fri|    1161|       5|  999|       0|nonexistent|        -1.8|        93.075|        -47.1|    1.405|     5099.1| no|\n| 20| admin.| single|high.school|     no|     no|  no| cellular|  jul|        wed|     208|       4|  999|       0|nonexistent|         1.4|        93.918|        -42.7|    4.962|     5228.1| no|\n+---+-------+-------+-----------+-------+-------+----+---------+-----+-----------+--------+--------+-----+--------+-----------+------------+--------------+-------------+---------+-----------+---+\nonly showing top 10 rows\n\n"}]},"apps":[],"jobName":"paragraph_1520108349049_-1444284571","id":"20180303-201909_670268623","dateCreated":"2018-03-03T20:19:09+0000","dateStarted":"2018-03-23T08:51:07+0000","dateFinished":"2018-03-23T08:51:42+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:8816"},{"title":"2. Basic statistics","text":"%md\n\n### Plotting using Zeppelin\n\nFirst of all, they want to know some basic demographics of the bank’s customer base. Specifically, they want to explore their customers **education levels** and **job families**. Let's start by computing the distribution of job families and by using Zeppelin graphics interpreter to plot the results:\n\n#### Computing the education levels using SparkSQL\n\nWe will use SparkSQL capabilities for computing some basic statistics. Please get familiar with them reading the SparkSQL docs [here](https://spark.apache.org/sql/).\nIf you have use SQL before it'll be very easy for run to run queries on a dataframe. You can just use the `.sql('SELECT * FROM ...')` method and write your query! You should register your data frame first using the function `.registerTempTable('table name')`\nAlso, don't forget to get familiar with the native SparkSQL methods such as `select()`, `groupBy()` or `limit()`. Here, we are going to use these methods to get some insights about the data we've been given.\nDon't forget to add '%pyspark' at the top of your cell if PySpark is not your default interpreter!\n\n#### Using Zeppelin's %table interpreter\n\nZeppelin comes with a graphic interpreter that we can use to make quick visualizations of our results. You can go into *table* mode by printing a string with `%table` in the first line (don't forget the new line character is `\\n`), your column headers in the second line splitted by tabs (`\\t`) and your values on the subsequent lines (splitted by tabs as well). Please take a look how we have put together this string on the following two cells by applying a lambda function to the results collected from our data.","user":"anonymous","dateUpdated":"2018-03-23T07:52:41+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false,"title":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h3>Plotting using Zeppelin</h3>\n<p>First of all, they want to know some basic demographics of the bank’s customer base. Specifically, they want to explore their customers <strong>education levels</strong> and <strong>job families</strong>. Let&rsquo;s start by computing the distribution of job families and by using Zeppelin graphics interpreter to plot the results:</p>\n<h4>Computing the education levels using SparkSQL</h4>\n<p>We will use SparkSQL capabilities for computing some basic statistics. Please get familiar with them reading the SparkSQL docs <a href=\"https://spark.apache.org/sql/\">here</a>.<br/>If you have use SQL before it&rsquo;ll be very easy for run to run queries on a dataframe. You can just use the <code>.sql(&#39;SELECT * FROM ...&#39;)</code> method and write your query! You should register your data frame first using the function <code>.registerTempTable(&#39;table name&#39;)</code><br/>Also, don&rsquo;t forget to get familiar with the native SparkSQL methods such as <code>select()</code>, <code>groupBy()</code> or <code>limit()</code>. Here, we are going to use these methods to get some insights about the data we&rsquo;ve been given.<br/>Don&rsquo;t forget to add &lsquo;%pyspark&rsquo; at the top of your cell if PySpark is not your default interpreter!</p>\n<h4>Using Zeppelin&rsquo;s %table interpreter</h4>\n<p>Zeppelin comes with a graphic interpreter that we can use to make quick visualizations of our results. You can go into <em>table</em> mode by printing a string with <code>%table</code> in the first line (don&rsquo;t forget the new line character is <code>\\n</code>), your column headers in the second line splitted by tabs (<code>\\t</code>) and your values on the subsequent lines (splitted by tabs as well). Please take a look how we have put together this string on the following two cells by applying a lambda function to the results collected from our data.</p>\n</div>"}]},"apps":[],"jobName":"paragraph_1520108274079_-1401836310","id":"20180303-201754_362095081","dateCreated":"2018-03-03T20:17:54+0000","dateStarted":"2018-03-23T07:52:41+0000","dateFinished":"2018-03-23T07:52:51+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:8817"},{"title":"2.1. Computing education level counts","text":"%pyspark\n\neducationCounts = data.groupBy('education').count().collect()","user":"anonymous","dateUpdated":"2018-03-23T07:56:40+0000","config":{"colWidth":12,"editorMode":"ace/mode/python","results":{},"enabled":true,"editorSetting":{"language":"python"},"editorHide":false,"title":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"apps":[],"jobName":"paragraph_1519469268684_1026336188","id":"20180218-224547_550167252","dateCreated":"2018-02-24T10:47:48+0000","dateStarted":"2018-03-23T07:56:40+0000","dateFinished":"2018-03-23T07:56:43+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:8818"},{"title":"2.2. Plotting education level counts","text":"%pyspark\nprint(\"%table\\nEducation Level\\tCount\\n\"+\"\\n\".join(list(map(lambda x: x['education'] + '\\t' + str(x['count']), educationCounts))))","user":"anonymous","dateUpdated":"2018-03-23T07:56:46+0000","config":{"colWidth":12,"enabled":true,"results":{"0":{"graph":{"mode":"multiBarChart","height":300,"optionOpen":false},"helium":{}}},"editorSetting":{"language":"python"},"editorMode":"ace/mode/python","title":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TABLE","data":"Education Level\tCount\nhigh.school\t4768\nunknown\t836\nbasic.6y\t1164\nprofessional.course\t2641\nuniversity.degree\t6050\nilliterate\t9\nbasic.4y\t2092\nbasic.9y\t3034\n"}]},"apps":[],"jobName":"paragraph_1520281796370_1111579971","id":"20180305-202956_1538649883","dateCreated":"2018-03-05T20:29:56+0000","dateStarted":"2018-03-23T07:56:46+0000","dateFinished":"2018-03-23T07:56:46+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:8819"},{"title":"2.3. YOUR TURN: Computing job family counts","text":"%pyspark\n# Count the number of customers on each job family using PySpark (either using .sql or the native method -> preferred). Collect the results in a variable.\njobCounts = data.groupBy('job').count().collect()","user":"anonymous","dateUpdated":"2018-03-23T07:56:55+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"python"},"editorHide":false,"title":true,"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"apps":[],"jobName":"paragraph_1520164431067_-859335713","id":"20180304-115351_1785466766","dateCreated":"2018-03-04T11:53:51+0000","dateStarted":"2018-03-23T07:56:55+0000","dateFinished":"2018-03-23T07:56:56+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:8820"},{"title":"2.4. YOUR TURN: Plotting job family counts","text":"%pyspark\n# Plot the results you computed on the previous step using Zeppelin's %table interpreter\nprint(\"%table\\nJob Families\\tCount\\n\"+\"\\n\".join(list(map(lambda x: x['job'] + '\\t' + str(x['count']), jobCounts))))","user":"anonymous","dateUpdated":"2018-03-23T07:57:01+0000","config":{"colWidth":12,"enabled":true,"results":{"0":{"graph":{"mode":"multiBarChart","height":300,"optionOpen":false},"helium":{}}},"editorSetting":{"language":"python"},"editorMode":"ace/mode/python","editorHide":false,"title":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TABLE","data":"Job Families\tCount\nmanagement\t1447\nretired\t876\nunknown\t156\nself-employed\t723\nstudent\t434\nblue-collar\t4606\nentrepreneur\t725\nadmin.\t5204\ntechnician\t3419\nservices\t1962\nhousemaid\t537\nunemployed\t505\n"}]},"apps":[],"jobName":"paragraph_1520438217243_-615401672","id":"20180307-155657_309996636","dateCreated":"2018-03-07T15:56:57+0000","dateStarted":"2018-03-23T07:57:01+0000","dateFinished":"2018-03-23T07:57:01+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:8821"},{"title":"2.5. YOUR TURN (additional): Explore other features in the data","text":"%pyspark\n","user":"anonymous","dateUpdated":"2018-03-07T18:33:39+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"python"},"editorMode":"ace/mode/python","title":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1520438279450_274214406","id":"20180307-155759_1571284738","dateCreated":"2018-03-07T15:57:59+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:8822"},{"title":"3. Clustering","text":"%md\n\nThe next step of our assignment is to create a set of segments on our database. We will use Spark's ML pipelines for it. You can find more information regarding Spark's ML pipeliens [here](https://spark.apache.org/docs/latest/ml-pipeline.html).\n\n\n","user":"anonymous","dateUpdated":"2018-03-12T18:59:46+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","title":true,"editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<p>The next step of our assignment is to create a set of segments on our database. We will use Spark&rsquo;s ML pipelines for it. You can find more information regarding Spark&rsquo;s ML pipeliens <a href=\"https://spark.apache.org/docs/latest/ml-pipeline.html\">here</a>.</p>\n</div>"}]},"apps":[],"jobName":"paragraph_1520447852595_1436021906","id":"20180307-183732_2135972670","dateCreated":"2018-03-07T18:37:32+0000","dateStarted":"2018-03-12T18:59:46+0000","dateFinished":"2018-03-12T18:59:46+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:8823"},{"text":"%pyspark\n\nfrom pyspark.ml.feature import VectorAssembler\nfrom pyspark.ml.clustering import KMeans\nfrom pyspark.ml import Pipeline\nfrom pyspark.ml.feature import OneHotEncoder, StringIndexer\n\nstringEncoder = StringIndexer(inputCol=\"job\", outputCol=\"jobInd\")\nencoder = OneHotEncoder(inputCol=\"jobInd\", outputCol=\"jobVec\")\nassembler = VectorAssembler(inputCols=[\"jobVec\", \"age\"],outputCol=\"features\")\nkmeans = KMeans().setK(10).setSeed(1)\n\npipeline = Pipeline(stages=[stringEncoder, encoder, assembler, kmeans])\n\np = pipeline.fit(data)\ntransformed = p.transform(data).cache()\ntransformed.groupby(\"prediction\").count().show()","user":"anonymous","dateUpdated":"2018-03-23T08:51:53+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+----------+-----+\n|prediction|count|\n+----------+-----+\n|         1| 3952|\n|         6| 1609|\n|         3| 1619|\n|         5| 4286|\n|         9|  567|\n|         4| 2495|\n|         8| 1908|\n|         7|  258|\n|         2| 1273|\n|         0| 2627|\n+----------+-----+\n\n"}]},"apps":[],"jobName":"paragraph_1520879233834_-1492798564","id":"20180312-182713_1183626870","dateCreated":"2018-03-12T18:27:13+0000","dateStarted":"2018-03-23T08:51:53+0000","dateFinished":"2018-03-23T08:52:07+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:8824"},{"user":"anonymous","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"python"},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1520881219815_-114625835","id":"20180312-190019_1904349945","dateCreated":"2018-03-12T19:00:19+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:8825","text":"%pyspark\n\ntransformed.groupby(\"prediction\").pivot(\"y\").count().show()","dateUpdated":"2018-03-23T09:13:29+0000","dateFinished":"2018-03-23T09:13:33+0000","dateStarted":"2018-03-23T09:13:29+0000","results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+----------+----+---+\n|prediction|  no|yes|\n+----------+----+---+\n|         1|3478|474|\n|         6|1468|141|\n|         3|1332|287|\n|         5|3845|441|\n|         9| 414|153|\n|         4|2283|212|\n|         8|1724|184|\n|         7| 134|124|\n|         2|1150|123|\n|         0|2405|222|\n+----------+----+---+\n\n"}]}},{"text":"%pyspark\nbody = \"1\"*10227\nbody","user":"anonymous","dateUpdated":"2018-03-23T09:23:11+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"python"},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1521796961142_1407083262","id":"20180323-092241_398772775","dateCreated":"2018-03-23T09:22:41+0000","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:10024","dateFinished":"2018-03-23T09:23:11+0000","dateStarted":"2018-03-23T09:23:11+0000","results":{"code":"SUCCESS","msg":[{"type":"TEXT","datan"}]}},{"text":"%pyspark\n\nimport urllib.request\n\n# make a string with the request type in it:\nmethod = \"POST\"\n# create a handler. you can specify different handlers here (file uploads etc)\n# but we go for the default\nhandler = urllib2.HTTPHandler()\n# create an openerdirector instance\nopener = urllib2.build_opener(handler)\n# build a request\ndata = urllib.urlencode(dictionary_of_POST_fields_or_None)\nrequest = urllib2.Request(url, data=data)\n# add any other information you want\nrequest.add_header(\"Content-Type\",'application/json')\n# overload the get method function with a small anonymous function...\n\n\nrequest = request(\"https://wsleaderboard.herokuapp.com/submission?username=sergio_test&password=sergio_test\", headers={\"Accept\" : \"application/json\"}, body=1*10227)\n","user":"anonymous","dateUpdated":"2018-03-23T09:25:41+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"python"},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1521795246688_-527690308","id":"20180323-085406_1450722594","dateCreated":"2018-03-23T08:54:06+0000","status":"ERROR","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:9864","dateFinished":"2018-03-23T09:25:41+0000","dateStarted":"2018-03-23T09:25:41+0000","results":{"code":"ERROR","msg":[{"type":"TEXT","data":"Traceback (most recent call last):\n  File \"/var/folders/1j/_5fq_34d2mn11cc16qy9s2qm658ntx/T/zeppelin_pyspark-7143794780493835695.py\", line 355, in <module>\n    exec(code, _zcUserQueryNameSpace)\n  File \"<stdin>\", line 3, in <module>\nNameError: name 'urllib2' is not defined\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/var/folders/1j/_5fq_34d2mn11cc16qy9s2qm658ntx/T/zeppelin_pyspark-7143794780493835695.py\", line 367, in <module>\n    raise Exception(traceback.format_exc())\nException: Traceback (most recent call last):\n  File \"/var/folders/1j/_5fq_34d2mn11cc16qy9s2qm658ntx/T/zeppelin_pyspark-7143794780493835695.py\", line 355, in <module>\n    exec(code, _zcUserQueryNameSpace)\n  File \"<stdin>\", line 3, in <module>\nNameError: name 'urllib2' is not defined\n\n"}]}},{"text":"%pyspark\n","user":"anonymous","dateUpdated":"2018-03-23T09:23:20+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"python"},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1521797000872_502800754","id":"20180323-092320_1234851054","dateCreated":"2018-03-23T09:23:20+0000","status":"READY","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:10177"}],"name":"Task 1","id":"2D9CS78NW","angularObjects":{"2D8MNS82M:shared_process":[],"2D8KQE92P:shared_process":[],"2D8P8URXH:shared_process":[],"2D7GW4WD5:shared_process":[],"2D871HMZA:shared_process":[],"2D6UX3TBT:shared_process":[],"2D886YVQM:shared_process":[],"2D6J3EFVT:shared_process":[],"2D8FHHFU5:shared_process":[],"2D954TTF8:shared_process":[],"2D95FJ579:shared_process":[],"2D84P1U12:shared_process":[],"2D8DHUJVN:shared_process":[],"2D8XGMM1B:shared_process":[],"2D8VBSAXK:shared_process":[],"2D7E5VQ3F:shared_process":[],"2D9KUE39G:shared_process":[],"2D7D9MABB:shared_process":[],"2D5UKYEN4:shared_process":[]},"config":{"looknfeel":"default","personalizedMode":"false"},"info":{}}